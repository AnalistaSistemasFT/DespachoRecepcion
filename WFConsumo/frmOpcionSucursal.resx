<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        c9T8inRCAAAAAHnU/S561f5eedX+BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWEjzCmxU
        9jb6bFZK+mxW2PpuWP/znY3/9rSp//psV//xinn/7c7H//Pn4//x5uH/67ao//yLdP/6mYX/9tLK//To
        5P/4uqz//Yt0//yLc7z6bFYO/IJrIgAAAAAAAAAAQKvvBEKt7zhHruhwR7b2BgAAAAAAAAAAAAAAAAAA
        AAD7bFYm+2tXtPlqVf/5bVf/+3Ne//igkv/1fmv/7byy//Lm4f/06OT/9Ojk/+/j3//w5OD/7LKj//iu
        n//2s6X/+Kyc//mvoP/9i3T//IVu4vtsV+b8hnD2/Ip0iv2Lcw5Fr/CeWrvx+m7I9/xQt/DYAAAAAAAA
        AAD6bFcE+2tXivpsVvj4e2b/88C1//mGdf/4cV3/7qeb//Dh3P/06OT/9Ojk//Lm4f/m2tT/4dPN/9/T
        zf/v5N//7bCh//fDuP/008z//Ihx//2LdP/8gmz/+2xX//yHcP/9i3T//Ytz6J6ps6Z8zvbWdcz4/HPM
        +NQAAAAAAAAAAPtrVgz7bFf/+2xX//mQf//5hXT/8JSF/+7W0P/06OT/9Ojk//To5P/v49//4tTP/+bY
        0v/o2tT/7uHc//Pn4//v5N//7qyc//iVgP/8inP//Yt0//yCbP/7bFf//Idw//2LdP/9i3T/lK7H/2Wn
        y9J7vNmqgtP5YAAAAAAAAAAA+2xWDPtsV//7bFf/84Jw/+3Gvv/z5+P/9Ojk//To5P/06OT/9Ojk//Pm
        4v/s39r/7N/Z//Lm4v/06OT/9Ojk//Lm4v/o3Nb/4dXO/+HSyv/iysD/5760/+6ai//8h3D//Yt0//2L
        dP+ZudL/d8nz/2+44v/LkImm/ItzHgAAAAD7bFcO9nVi/+6yqP/x5OD/9Ojk//To5P/z5+P/9Ojk//To
        5P/06OT/9Ojk//To5P/06OT/9Ojk//Pn4//t4dv/59rU/+ja1P/o2tT/6NrU/+nb1f/v4t3/8eXh/+yz
        pP/8i3T//Yt0/5ayxv91yPL/c6Cq/9mFbv/9inT0/Yp0DubV0Gjv3Nf/9Ojk//To5P/y5uL/6NvW/93Q
        yv/v49//9Ojk//To5P/06OT/9Ojk//To5P/v497/6NvV/+ja1P/o2tT/6NrU/+ja1P/t39r/8+fi//To
        5P/06OT/8OXg/+2voP/9i3T/8pWA/7SDbv99YTj/24Bk//2LdP/9i3MQ8+jjOPTn4/L06OT/7ODb/+LV
        z//m2NL/6NrU/+ve2f/06OT/9Ojk//To5P/x5eH/6t7X/+fZ0//o2tT/6NrU/+fZ0//r3dj/8uXh//To
        5P/06OT/9Ojk/+7i3v/w5OD/7+Tf/+6rm//4uav/9Mm//+aOd//thWz//Yt0//2LdBAAAAAA9OjjQvTo
        5Pbs39r/6NrU/+ve2P/y5eH/9Ojk//To5P/y5+L/7ODa/+fa0//o2tT/6NrU/+ja1P/p29b/8OPe//To
        5P/06OT/9Ojk//Hl4f/m2dT/4tXP/97Ry//x5OD/7+Pe/++ol//5saH/+LOl//2LdP/9i3T//Yp0EAAA
        AAAAAAAA9OfkSvPo4/jy5uL/9Ojk//To5P/z5+P/7uLc/+jb1P/o2tT/6NrU/+ja1P/o2tT/7uHc//Pn
        4//06OT/9Ojk//To5P/x5eH/4tTP/+bZ0//o2tX/7uHd//Pn4//06OT/7OHb/+XAtP/nt6n/6a6f/+6n
        l//hxr1AAAAAAAAAAAAAAAAA9OjjVPTn4/z06OT/8OTf/+nc1v/o2tT/6NrU/+ja1P/o2tT/7N/a//Pm
        4v/06OT/9Ojk//To5P/06OT/9Ojk//Pn4//v4t3/7d/a//Pm4v/06OT/8+fj/+3h2//n2tT/6NrU/+ja
        1P/o2tT/5tnS3uTW0EoAAAAAAAAAAAAAAAAAAAAA8+fjXO3g29Tn2tPy6NrU/+ja1P/o2tT/6t3X//Hl
        4P/06OT/9Ojk//To5P/z5+P/9Ojk//To5P/06OT/9Ojk//To5P/06OT/9Ojk/+/j3v/o29X/6NrU/+ja
        1P/o2tT/59nU9ufa1IDo2tMKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADo2tQO6NrUKuzf
        2lrz5+P29Ojk//To5P/y5uL/59rV/93Qyv/q3tn/9Ojk//To5P/06OT/9Ojk//Hl4P/q3df/59nT/+ja
        1P/o2tT/6NrU/+jZ1Kjn2dQeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPTo40jz6OP47eDc/+LVz//m2NL/6NrU/+zf2v/06OT/9Ojk//Ln4v/s4Nr/59rT/+ja
        1P/o2tT/6NrU/+ja09Dn2dRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPTn5FLv4t766dvV/+ze2f/y5uL/9Ojk//Pn4//u4tz/6NvU/+ja
        1P/o2tT/6NrU/+fZ1Ozn2tNo6NrTBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPTo5Fzz5+P89Ojk//To5P/w5N//6dzW/+ja
        1P/o2tT/6NrU/+fZ1Pro2dOS59nUEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPTn42bz5uL8697Y/+fa
        0//o2tT/6NrU/+ja1P/o2tS86NnTLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOrd
        1yrn2tRM6NnUaOfa1ILn2tSe59rUUufb1QIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////9////w//j/4G/gP8AfwB+AH8AHgB/gA8B/4APAe+AD//DgB//A
        OA/fABw//gAH//gAA//gAABDgAAAA4AAAAeAAAADgAAAAYAAAAGAAAABwAAAAeAAAAHwAAAB+AAAA//A
        AA//4AA///AA///4Af///Af///+f//////8=
</value>
  </data>
</root>